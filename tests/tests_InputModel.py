import unittest
from fca.io import file_models
from fca.io.input_models import InputModel
from fca.io.transformers import List2SetTransformer
from fca.io.file_models  import ParseableModel

test_file_path = '/tmp/__test__example__.txt'
test_file_content = '''1 3 4 8
1 3 4 5 6
3 5 7 8
2 3 4 6
1 5 6 8
2 4 6 8
4 5 6'''

class TestInputModel(unittest.TestCase):        
    def setUp(self) -> None:
        with open(test_file_path, 'w') as fout:
            fout.write(test_file_content)

    def test_reading(self):
        input_model = InputModel(test_file_path)
        self.assertEqual(len(list(input_model.representations)), 7, "Fetching representations from the input model should get 7 objects")

    def test_representation_1(self):
        reps = list(InputModel(test_file_path).representations)
        self.assertIn({0,1,2,3}, reps, "NOTICE THAT 0,1,2,3 representes the first object's attributes 1,3,4,8 (IDs are assigned from 0 to n where n is the number of attributes)")

    def test_representation_2(self):
        reps = list(InputModel(test_file_path).representations)
        self.assertIn({0,1,2,4,5}, reps, "0,1,2,4,5 representes the second object's attributes 1,3,4,5,6 (IDs are assigned from 0 to n where n is the number of attributes)")

    def test_representation_3(self):
        reps = list(InputModel(test_file_path).representations)
        self.assertIn({7,1,2,5}, reps, "7,1,2,5 representes the fourth object's attributes 2,3,4,6 (IDs are assigned from 0 to n where n is the number of attributes)")
    
    def test_transformer_exists(self):
        input_model = InputModel(test_file_path)
        self.assertIsInstance(input_model.transformer, List2SetTransformer)
    
    def test_transformer_1(self):
        transformer = InputModel(test_file_path).transformer
        self.assertEqual(len(transformer.objects), 0, "Transformer should not contain elements before objects are registered by fetching all representations")

    def test_transformer_2(self):
        input_model = InputModel(test_file_path)
        transformer = input_model.transformer
        list(input_model.representations)
        self.assertEqual(len(transformer.objects), 7, "After fetching all representations, transformer should have 7 objects")

    def test_transformer_3(self):
        input_model = InputModel(test_file_path)
        transformer = input_model.transformer
        list(input_model.representations)
        self.assertEqual(len(transformer.attributes), 8, "After fetching all representations, transformer should have 8 attributes")
    
    def test_transformer_4(self):
        input_model = InputModel(test_file_path)
        transformer = input_model.transformer
        list(input_model.representations)
        self.assertEqual(transformer.attribute_index[0], '1', "The inverted map created by the transformer should map the first attribute index to attribute '1'")
    
    def test_transformer_5(self):
        input_model = InputModel(test_file_path)
        transformer = input_model.transformer
        list(input_model.representations)
        self.assertEqual(transformer.attributes['7'], 6, "The  map created by the transformer should map attribute '7' to attribute index 6")
    
    def test_filemanagerfactory(self):
        input_model = InputModel(test_file_path)
        self.assertIsInstance(input_model._fmgr, ParseableModel, "FileModelFactory should build a ParseableModel from the example file with extension .txt")

    def test_filemodel_1(self):
        file_model = InputModel(test_file_path)._fmgr
        self.assertEqual(file_model.filepath, test_file_path, "FileModel built from FileModelFactory should contain the same filepath as the one given to the InputModel")

    def test_filemodel_2(self):
        file_model = InputModel(test_file_path)._fmgr
        self.assertEqual(len(file_model.parser("1 2 3")), 3, "The parser generated by the FileModel from a txt file should hangle space-separated-values and thus, should split '1 2 3' in 3 elements")

if __name__ == '__main__':
    unittest.main()